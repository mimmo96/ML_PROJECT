import numpy as np
import Ensemble
from Model_Selection import ThreadPool_average
import File_names as fn

def cv_k_fold(epochs, grid, training_set, test_set, type_problem,num_training, k_fold = 5):
    #divide dataset into K distinct and equal D_1, ..., D_K
    size_validation = training_set.input().shape[0] // k_fold
    top_NN = Ensemble.Ensemble()
    
    for hyperparameter in grid:
        #it will cointain K models generated by k partition of TR
        NN_k_fold = []
        for k in range(k_fold):
            num_training += 1
            if k == k_fold-1:
                last_set = True
            else:
                last_set = False
            #create training and validation set for Kth iteration of k_fold
            training_k, validation_k = training_set.create_fold(k*size_validation, (k+1)*size_validation, last_set)
            #for each model, train "trials_for_model" times with different initialization type_weightshts
            model_stat = ThreadPool_average(type_problem, training_k, validation_k, epochs, num_training, hyperparameter)
            model_stat.write_result(fn.general_results)
            NN_k_fold.append(model_stat)

        #best_NN_fold = tuple (neaural network, mean_mse, mean_mee, num_training) it contains best model btw k models generated 
        # and the mean mse btw k models
        NN_k_fold = Ensemble.Ensemble(NN_k_fold, k_fold, type_problem)
        best_NN_k_fold = NN_k_fold.best_neural_network() 
        top_NN.insert_model(best_NN_k_fold)

    top_NN.write_result(fn.top_general_results)
    return top_NN.getNN(),num_training
